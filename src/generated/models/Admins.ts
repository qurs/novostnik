
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Admins` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Admins
 * 
 */
export type AdminsModel = runtime.Types.Result.DefaultSelection<Prisma.$AdminsPayload>

export type AggregateAdmins = {
  _count: AdminsCountAggregateOutputType | null
  _min: AdminsMinAggregateOutputType | null
  _max: AdminsMaxAggregateOutputType | null
}

export type AdminsMinAggregateOutputType = {
  email: string | null
  role: string | null
}

export type AdminsMaxAggregateOutputType = {
  email: string | null
  role: string | null
}

export type AdminsCountAggregateOutputType = {
  email: number
  role: number
  _all: number
}


export type AdminsMinAggregateInputType = {
  email?: true
  role?: true
}

export type AdminsMaxAggregateInputType = {
  email?: true
  role?: true
}

export type AdminsCountAggregateInputType = {
  email?: true
  role?: true
  _all?: true
}

export type AdminsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Admins to aggregate.
   */
  where?: Prisma.AdminsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Admins to fetch.
   */
  orderBy?: Prisma.AdminsOrderByWithRelationInput | Prisma.AdminsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AdminsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Admins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Admins.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Admins
  **/
  _count?: true | AdminsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AdminsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AdminsMaxAggregateInputType
}

export type GetAdminsAggregateType<T extends AdminsAggregateArgs> = {
      [P in keyof T & keyof AggregateAdmins]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAdmins[P]>
    : Prisma.GetScalarType<T[P], AggregateAdmins[P]>
}




export type AdminsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AdminsWhereInput
  orderBy?: Prisma.AdminsOrderByWithAggregationInput | Prisma.AdminsOrderByWithAggregationInput[]
  by: Prisma.AdminsScalarFieldEnum[] | Prisma.AdminsScalarFieldEnum
  having?: Prisma.AdminsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AdminsCountAggregateInputType | true
  _min?: AdminsMinAggregateInputType
  _max?: AdminsMaxAggregateInputType
}

export type AdminsGroupByOutputType = {
  email: string
  role: string
  _count: AdminsCountAggregateOutputType | null
  _min: AdminsMinAggregateOutputType | null
  _max: AdminsMaxAggregateOutputType | null
}

type GetAdminsGroupByPayload<T extends AdminsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AdminsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AdminsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AdminsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AdminsGroupByOutputType[P]>
      }
    >
  >



export type AdminsWhereInput = {
  AND?: Prisma.AdminsWhereInput | Prisma.AdminsWhereInput[]
  OR?: Prisma.AdminsWhereInput[]
  NOT?: Prisma.AdminsWhereInput | Prisma.AdminsWhereInput[]
  email?: Prisma.StringFilter<"Admins"> | string
  role?: Prisma.StringFilter<"Admins"> | string
}

export type AdminsOrderByWithRelationInput = {
  email?: Prisma.SortOrder
  role?: Prisma.SortOrder
}

export type AdminsWhereUniqueInput = Prisma.AtLeast<{
  email?: string
  AND?: Prisma.AdminsWhereInput | Prisma.AdminsWhereInput[]
  OR?: Prisma.AdminsWhereInput[]
  NOT?: Prisma.AdminsWhereInput | Prisma.AdminsWhereInput[]
  role?: Prisma.StringFilter<"Admins"> | string
}, "email" | "email">

export type AdminsOrderByWithAggregationInput = {
  email?: Prisma.SortOrder
  role?: Prisma.SortOrder
  _count?: Prisma.AdminsCountOrderByAggregateInput
  _max?: Prisma.AdminsMaxOrderByAggregateInput
  _min?: Prisma.AdminsMinOrderByAggregateInput
}

export type AdminsScalarWhereWithAggregatesInput = {
  AND?: Prisma.AdminsScalarWhereWithAggregatesInput | Prisma.AdminsScalarWhereWithAggregatesInput[]
  OR?: Prisma.AdminsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AdminsScalarWhereWithAggregatesInput | Prisma.AdminsScalarWhereWithAggregatesInput[]
  email?: Prisma.StringWithAggregatesFilter<"Admins"> | string
  role?: Prisma.StringWithAggregatesFilter<"Admins"> | string
}

export type AdminsCreateInput = {
  email: string
  role: string
}

export type AdminsUncheckedCreateInput = {
  email: string
  role: string
}

export type AdminsUpdateInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AdminsUncheckedUpdateInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AdminsCreateManyInput = {
  email: string
  role: string
}

export type AdminsUpdateManyMutationInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AdminsUncheckedUpdateManyInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AdminsCountOrderByAggregateInput = {
  email?: Prisma.SortOrder
  role?: Prisma.SortOrder
}

export type AdminsMaxOrderByAggregateInput = {
  email?: Prisma.SortOrder
  role?: Prisma.SortOrder
}

export type AdminsMinOrderByAggregateInput = {
  email?: Prisma.SortOrder
  role?: Prisma.SortOrder
}



export type AdminsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  email?: boolean
  role?: boolean
}, ExtArgs["result"]["admins"]>

export type AdminsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  email?: boolean
  role?: boolean
}, ExtArgs["result"]["admins"]>

export type AdminsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  email?: boolean
  role?: boolean
}, ExtArgs["result"]["admins"]>

export type AdminsSelectScalar = {
  email?: boolean
  role?: boolean
}

export type AdminsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"email" | "role", ExtArgs["result"]["admins"]>

export type $AdminsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Admins"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    email: string
    role: string
  }, ExtArgs["result"]["admins"]>
  composites: {}
}

export type AdminsGetPayload<S extends boolean | null | undefined | AdminsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AdminsPayload, S>

export type AdminsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AdminsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AdminsCountAggregateInputType | true
  }

export interface AdminsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admins'], meta: { name: 'Admins' } }
  /**
   * Find zero or one Admins that matches the filter.
   * @param {AdminsFindUniqueArgs} args - Arguments to find a Admins
   * @example
   * // Get one Admins
   * const admins = await prisma.admins.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AdminsFindUniqueArgs>(args: Prisma.SelectSubset<T, AdminsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AdminsClient<runtime.Types.Result.GetResult<Prisma.$AdminsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Admins that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AdminsFindUniqueOrThrowArgs} args - Arguments to find a Admins
   * @example
   * // Get one Admins
   * const admins = await prisma.admins.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AdminsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AdminsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AdminsClient<runtime.Types.Result.GetResult<Prisma.$AdminsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Admins that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminsFindFirstArgs} args - Arguments to find a Admins
   * @example
   * // Get one Admins
   * const admins = await prisma.admins.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AdminsFindFirstArgs>(args?: Prisma.SelectSubset<T, AdminsFindFirstArgs<ExtArgs>>): Prisma.Prisma__AdminsClient<runtime.Types.Result.GetResult<Prisma.$AdminsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Admins that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminsFindFirstOrThrowArgs} args - Arguments to find a Admins
   * @example
   * // Get one Admins
   * const admins = await prisma.admins.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AdminsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AdminsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AdminsClient<runtime.Types.Result.GetResult<Prisma.$AdminsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Admins that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Admins
   * const admins = await prisma.admins.findMany()
   * 
   * // Get first 10 Admins
   * const admins = await prisma.admins.findMany({ take: 10 })
   * 
   * // Only select the `email`
   * const adminsWithEmailOnly = await prisma.admins.findMany({ select: { email: true } })
   * 
   */
  findMany<T extends AdminsFindManyArgs>(args?: Prisma.SelectSubset<T, AdminsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdminsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Admins.
   * @param {AdminsCreateArgs} args - Arguments to create a Admins.
   * @example
   * // Create one Admins
   * const Admins = await prisma.admins.create({
   *   data: {
   *     // ... data to create a Admins
   *   }
   * })
   * 
   */
  create<T extends AdminsCreateArgs>(args: Prisma.SelectSubset<T, AdminsCreateArgs<ExtArgs>>): Prisma.Prisma__AdminsClient<runtime.Types.Result.GetResult<Prisma.$AdminsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Admins.
   * @param {AdminsCreateManyArgs} args - Arguments to create many Admins.
   * @example
   * // Create many Admins
   * const admins = await prisma.admins.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AdminsCreateManyArgs>(args?: Prisma.SelectSubset<T, AdminsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Admins and returns the data saved in the database.
   * @param {AdminsCreateManyAndReturnArgs} args - Arguments to create many Admins.
   * @example
   * // Create many Admins
   * const admins = await prisma.admins.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Admins and only return the `email`
   * const adminsWithEmailOnly = await prisma.admins.createManyAndReturn({
   *   select: { email: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AdminsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AdminsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdminsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Admins.
   * @param {AdminsDeleteArgs} args - Arguments to delete one Admins.
   * @example
   * // Delete one Admins
   * const Admins = await prisma.admins.delete({
   *   where: {
   *     // ... filter to delete one Admins
   *   }
   * })
   * 
   */
  delete<T extends AdminsDeleteArgs>(args: Prisma.SelectSubset<T, AdminsDeleteArgs<ExtArgs>>): Prisma.Prisma__AdminsClient<runtime.Types.Result.GetResult<Prisma.$AdminsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Admins.
   * @param {AdminsUpdateArgs} args - Arguments to update one Admins.
   * @example
   * // Update one Admins
   * const admins = await prisma.admins.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AdminsUpdateArgs>(args: Prisma.SelectSubset<T, AdminsUpdateArgs<ExtArgs>>): Prisma.Prisma__AdminsClient<runtime.Types.Result.GetResult<Prisma.$AdminsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Admins.
   * @param {AdminsDeleteManyArgs} args - Arguments to filter Admins to delete.
   * @example
   * // Delete a few Admins
   * const { count } = await prisma.admins.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AdminsDeleteManyArgs>(args?: Prisma.SelectSubset<T, AdminsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Admins.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Admins
   * const admins = await prisma.admins.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AdminsUpdateManyArgs>(args: Prisma.SelectSubset<T, AdminsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Admins and returns the data updated in the database.
   * @param {AdminsUpdateManyAndReturnArgs} args - Arguments to update many Admins.
   * @example
   * // Update many Admins
   * const admins = await prisma.admins.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Admins and only return the `email`
   * const adminsWithEmailOnly = await prisma.admins.updateManyAndReturn({
   *   select: { email: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AdminsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AdminsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AdminsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Admins.
   * @param {AdminsUpsertArgs} args - Arguments to update or create a Admins.
   * @example
   * // Update or create a Admins
   * const admins = await prisma.admins.upsert({
   *   create: {
   *     // ... data to create a Admins
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Admins we want to update
   *   }
   * })
   */
  upsert<T extends AdminsUpsertArgs>(args: Prisma.SelectSubset<T, AdminsUpsertArgs<ExtArgs>>): Prisma.Prisma__AdminsClient<runtime.Types.Result.GetResult<Prisma.$AdminsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Admins.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminsCountArgs} args - Arguments to filter Admins to count.
   * @example
   * // Count the number of Admins
   * const count = await prisma.admins.count({
   *   where: {
   *     // ... the filter for the Admins we want to count
   *   }
   * })
  **/
  count<T extends AdminsCountArgs>(
    args?: Prisma.Subset<T, AdminsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AdminsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Admins.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AdminsAggregateArgs>(args: Prisma.Subset<T, AdminsAggregateArgs>): Prisma.PrismaPromise<GetAdminsAggregateType<T>>

  /**
   * Group by Admins.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AdminsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AdminsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AdminsGroupByArgs['orderBy'] }
      : { orderBy?: AdminsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AdminsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Admins model
 */
readonly fields: AdminsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Admins.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AdminsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Admins model
 */
export interface AdminsFieldRefs {
  readonly email: Prisma.FieldRef<"Admins", 'String'>
  readonly role: Prisma.FieldRef<"Admins", 'String'>
}
    

// Custom InputTypes
/**
 * Admins findUnique
 */
export type AdminsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Admins
   */
  select?: Prisma.AdminsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Admins
   */
  omit?: Prisma.AdminsOmit<ExtArgs> | null
  /**
   * Filter, which Admins to fetch.
   */
  where: Prisma.AdminsWhereUniqueInput
}

/**
 * Admins findUniqueOrThrow
 */
export type AdminsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Admins
   */
  select?: Prisma.AdminsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Admins
   */
  omit?: Prisma.AdminsOmit<ExtArgs> | null
  /**
   * Filter, which Admins to fetch.
   */
  where: Prisma.AdminsWhereUniqueInput
}

/**
 * Admins findFirst
 */
export type AdminsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Admins
   */
  select?: Prisma.AdminsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Admins
   */
  omit?: Prisma.AdminsOmit<ExtArgs> | null
  /**
   * Filter, which Admins to fetch.
   */
  where?: Prisma.AdminsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Admins to fetch.
   */
  orderBy?: Prisma.AdminsOrderByWithRelationInput | Prisma.AdminsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Admins.
   */
  cursor?: Prisma.AdminsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Admins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Admins.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Admins.
   */
  distinct?: Prisma.AdminsScalarFieldEnum | Prisma.AdminsScalarFieldEnum[]
}

/**
 * Admins findFirstOrThrow
 */
export type AdminsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Admins
   */
  select?: Prisma.AdminsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Admins
   */
  omit?: Prisma.AdminsOmit<ExtArgs> | null
  /**
   * Filter, which Admins to fetch.
   */
  where?: Prisma.AdminsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Admins to fetch.
   */
  orderBy?: Prisma.AdminsOrderByWithRelationInput | Prisma.AdminsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Admins.
   */
  cursor?: Prisma.AdminsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Admins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Admins.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Admins.
   */
  distinct?: Prisma.AdminsScalarFieldEnum | Prisma.AdminsScalarFieldEnum[]
}

/**
 * Admins findMany
 */
export type AdminsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Admins
   */
  select?: Prisma.AdminsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Admins
   */
  omit?: Prisma.AdminsOmit<ExtArgs> | null
  /**
   * Filter, which Admins to fetch.
   */
  where?: Prisma.AdminsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Admins to fetch.
   */
  orderBy?: Prisma.AdminsOrderByWithRelationInput | Prisma.AdminsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Admins.
   */
  cursor?: Prisma.AdminsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Admins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Admins.
   */
  skip?: number
  distinct?: Prisma.AdminsScalarFieldEnum | Prisma.AdminsScalarFieldEnum[]
}

/**
 * Admins create
 */
export type AdminsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Admins
   */
  select?: Prisma.AdminsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Admins
   */
  omit?: Prisma.AdminsOmit<ExtArgs> | null
  /**
   * The data needed to create a Admins.
   */
  data: Prisma.XOR<Prisma.AdminsCreateInput, Prisma.AdminsUncheckedCreateInput>
}

/**
 * Admins createMany
 */
export type AdminsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Admins.
   */
  data: Prisma.AdminsCreateManyInput | Prisma.AdminsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Admins createManyAndReturn
 */
export type AdminsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Admins
   */
  select?: Prisma.AdminsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Admins
   */
  omit?: Prisma.AdminsOmit<ExtArgs> | null
  /**
   * The data used to create many Admins.
   */
  data: Prisma.AdminsCreateManyInput | Prisma.AdminsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Admins update
 */
export type AdminsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Admins
   */
  select?: Prisma.AdminsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Admins
   */
  omit?: Prisma.AdminsOmit<ExtArgs> | null
  /**
   * The data needed to update a Admins.
   */
  data: Prisma.XOR<Prisma.AdminsUpdateInput, Prisma.AdminsUncheckedUpdateInput>
  /**
   * Choose, which Admins to update.
   */
  where: Prisma.AdminsWhereUniqueInput
}

/**
 * Admins updateMany
 */
export type AdminsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Admins.
   */
  data: Prisma.XOR<Prisma.AdminsUpdateManyMutationInput, Prisma.AdminsUncheckedUpdateManyInput>
  /**
   * Filter which Admins to update
   */
  where?: Prisma.AdminsWhereInput
  /**
   * Limit how many Admins to update.
   */
  limit?: number
}

/**
 * Admins updateManyAndReturn
 */
export type AdminsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Admins
   */
  select?: Prisma.AdminsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Admins
   */
  omit?: Prisma.AdminsOmit<ExtArgs> | null
  /**
   * The data used to update Admins.
   */
  data: Prisma.XOR<Prisma.AdminsUpdateManyMutationInput, Prisma.AdminsUncheckedUpdateManyInput>
  /**
   * Filter which Admins to update
   */
  where?: Prisma.AdminsWhereInput
  /**
   * Limit how many Admins to update.
   */
  limit?: number
}

/**
 * Admins upsert
 */
export type AdminsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Admins
   */
  select?: Prisma.AdminsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Admins
   */
  omit?: Prisma.AdminsOmit<ExtArgs> | null
  /**
   * The filter to search for the Admins to update in case it exists.
   */
  where: Prisma.AdminsWhereUniqueInput
  /**
   * In case the Admins found by the `where` argument doesn't exist, create a new Admins with this data.
   */
  create: Prisma.XOR<Prisma.AdminsCreateInput, Prisma.AdminsUncheckedCreateInput>
  /**
   * In case the Admins was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AdminsUpdateInput, Prisma.AdminsUncheckedUpdateInput>
}

/**
 * Admins delete
 */
export type AdminsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Admins
   */
  select?: Prisma.AdminsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Admins
   */
  omit?: Prisma.AdminsOmit<ExtArgs> | null
  /**
   * Filter which Admins to delete.
   */
  where: Prisma.AdminsWhereUniqueInput
}

/**
 * Admins deleteMany
 */
export type AdminsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Admins to delete
   */
  where?: Prisma.AdminsWhereInput
  /**
   * Limit how many Admins to delete.
   */
  limit?: number
}

/**
 * Admins without action
 */
export type AdminsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Admins
   */
  select?: Prisma.AdminsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Admins
   */
  omit?: Prisma.AdminsOmit<ExtArgs> | null
}
