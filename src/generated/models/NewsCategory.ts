
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `NewsCategory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model NewsCategory
 * 
 */
export type NewsCategoryModel = runtime.Types.Result.DefaultSelection<Prisma.$NewsCategoryPayload>

export type AggregateNewsCategory = {
  _count: NewsCategoryCountAggregateOutputType | null
  _min: NewsCategoryMinAggregateOutputType | null
  _max: NewsCategoryMaxAggregateOutputType | null
}

export type NewsCategoryMinAggregateOutputType = {
  id: string | null
  name: string | null
}

export type NewsCategoryMaxAggregateOutputType = {
  id: string | null
  name: string | null
}

export type NewsCategoryCountAggregateOutputType = {
  id: number
  name: number
  _all: number
}


export type NewsCategoryMinAggregateInputType = {
  id?: true
  name?: true
}

export type NewsCategoryMaxAggregateInputType = {
  id?: true
  name?: true
}

export type NewsCategoryCountAggregateInputType = {
  id?: true
  name?: true
  _all?: true
}

export type NewsCategoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which NewsCategory to aggregate.
   */
  where?: Prisma.NewsCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of NewsCategories to fetch.
   */
  orderBy?: Prisma.NewsCategoryOrderByWithRelationInput | Prisma.NewsCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.NewsCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` NewsCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` NewsCategories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned NewsCategories
  **/
  _count?: true | NewsCategoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: NewsCategoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: NewsCategoryMaxAggregateInputType
}

export type GetNewsCategoryAggregateType<T extends NewsCategoryAggregateArgs> = {
      [P in keyof T & keyof AggregateNewsCategory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateNewsCategory[P]>
    : Prisma.GetScalarType<T[P], AggregateNewsCategory[P]>
}




export type NewsCategoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NewsCategoryWhereInput
  orderBy?: Prisma.NewsCategoryOrderByWithAggregationInput | Prisma.NewsCategoryOrderByWithAggregationInput[]
  by: Prisma.NewsCategoryScalarFieldEnum[] | Prisma.NewsCategoryScalarFieldEnum
  having?: Prisma.NewsCategoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: NewsCategoryCountAggregateInputType | true
  _min?: NewsCategoryMinAggregateInputType
  _max?: NewsCategoryMaxAggregateInputType
}

export type NewsCategoryGroupByOutputType = {
  id: string
  name: string
  _count: NewsCategoryCountAggregateOutputType | null
  _min: NewsCategoryMinAggregateOutputType | null
  _max: NewsCategoryMaxAggregateOutputType | null
}

type GetNewsCategoryGroupByPayload<T extends NewsCategoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<NewsCategoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof NewsCategoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], NewsCategoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], NewsCategoryGroupByOutputType[P]>
      }
    >
  >



export type NewsCategoryWhereInput = {
  AND?: Prisma.NewsCategoryWhereInput | Prisma.NewsCategoryWhereInput[]
  OR?: Prisma.NewsCategoryWhereInput[]
  NOT?: Prisma.NewsCategoryWhereInput | Prisma.NewsCategoryWhereInput[]
  id?: Prisma.StringFilter<"NewsCategory"> | string
  name?: Prisma.StringFilter<"NewsCategory"> | string
}

export type NewsCategoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type NewsCategoryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.NewsCategoryWhereInput | Prisma.NewsCategoryWhereInput[]
  OR?: Prisma.NewsCategoryWhereInput[]
  NOT?: Prisma.NewsCategoryWhereInput | Prisma.NewsCategoryWhereInput[]
}, "id" | "name">

export type NewsCategoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  _count?: Prisma.NewsCategoryCountOrderByAggregateInput
  _max?: Prisma.NewsCategoryMaxOrderByAggregateInput
  _min?: Prisma.NewsCategoryMinOrderByAggregateInput
}

export type NewsCategoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.NewsCategoryScalarWhereWithAggregatesInput | Prisma.NewsCategoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.NewsCategoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.NewsCategoryScalarWhereWithAggregatesInput | Prisma.NewsCategoryScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"NewsCategory"> | string
  name?: Prisma.StringWithAggregatesFilter<"NewsCategory"> | string
}

export type NewsCategoryCreateInput = {
  id?: string
  name: string
}

export type NewsCategoryUncheckedCreateInput = {
  id?: string
  name: string
}

export type NewsCategoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type NewsCategoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type NewsCategoryCreateManyInput = {
  id?: string
  name: string
}

export type NewsCategoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type NewsCategoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
}

export type NewsCategoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type NewsCategoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type NewsCategoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}



export type NewsCategorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["newsCategory"]>

export type NewsCategorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["newsCategory"]>

export type NewsCategorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
}, ExtArgs["result"]["newsCategory"]>

export type NewsCategorySelectScalar = {
  id?: boolean
  name?: boolean
}

export type NewsCategoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name", ExtArgs["result"]["newsCategory"]>

export type $NewsCategoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "NewsCategory"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
  }, ExtArgs["result"]["newsCategory"]>
  composites: {}
}

export type NewsCategoryGetPayload<S extends boolean | null | undefined | NewsCategoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$NewsCategoryPayload, S>

export type NewsCategoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<NewsCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: NewsCategoryCountAggregateInputType | true
  }

export interface NewsCategoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NewsCategory'], meta: { name: 'NewsCategory' } }
  /**
   * Find zero or one NewsCategory that matches the filter.
   * @param {NewsCategoryFindUniqueArgs} args - Arguments to find a NewsCategory
   * @example
   * // Get one NewsCategory
   * const newsCategory = await prisma.newsCategory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends NewsCategoryFindUniqueArgs>(args: Prisma.SelectSubset<T, NewsCategoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__NewsCategoryClient<runtime.Types.Result.GetResult<Prisma.$NewsCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one NewsCategory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {NewsCategoryFindUniqueOrThrowArgs} args - Arguments to find a NewsCategory
   * @example
   * // Get one NewsCategory
   * const newsCategory = await prisma.newsCategory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends NewsCategoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, NewsCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__NewsCategoryClient<runtime.Types.Result.GetResult<Prisma.$NewsCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first NewsCategory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NewsCategoryFindFirstArgs} args - Arguments to find a NewsCategory
   * @example
   * // Get one NewsCategory
   * const newsCategory = await prisma.newsCategory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends NewsCategoryFindFirstArgs>(args?: Prisma.SelectSubset<T, NewsCategoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__NewsCategoryClient<runtime.Types.Result.GetResult<Prisma.$NewsCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first NewsCategory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NewsCategoryFindFirstOrThrowArgs} args - Arguments to find a NewsCategory
   * @example
   * // Get one NewsCategory
   * const newsCategory = await prisma.newsCategory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends NewsCategoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, NewsCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__NewsCategoryClient<runtime.Types.Result.GetResult<Prisma.$NewsCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more NewsCategories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NewsCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all NewsCategories
   * const newsCategories = await prisma.newsCategory.findMany()
   * 
   * // Get first 10 NewsCategories
   * const newsCategories = await prisma.newsCategory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const newsCategoryWithIdOnly = await prisma.newsCategory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends NewsCategoryFindManyArgs>(args?: Prisma.SelectSubset<T, NewsCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NewsCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a NewsCategory.
   * @param {NewsCategoryCreateArgs} args - Arguments to create a NewsCategory.
   * @example
   * // Create one NewsCategory
   * const NewsCategory = await prisma.newsCategory.create({
   *   data: {
   *     // ... data to create a NewsCategory
   *   }
   * })
   * 
   */
  create<T extends NewsCategoryCreateArgs>(args: Prisma.SelectSubset<T, NewsCategoryCreateArgs<ExtArgs>>): Prisma.Prisma__NewsCategoryClient<runtime.Types.Result.GetResult<Prisma.$NewsCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many NewsCategories.
   * @param {NewsCategoryCreateManyArgs} args - Arguments to create many NewsCategories.
   * @example
   * // Create many NewsCategories
   * const newsCategory = await prisma.newsCategory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends NewsCategoryCreateManyArgs>(args?: Prisma.SelectSubset<T, NewsCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many NewsCategories and returns the data saved in the database.
   * @param {NewsCategoryCreateManyAndReturnArgs} args - Arguments to create many NewsCategories.
   * @example
   * // Create many NewsCategories
   * const newsCategory = await prisma.newsCategory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many NewsCategories and only return the `id`
   * const newsCategoryWithIdOnly = await prisma.newsCategory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends NewsCategoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, NewsCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NewsCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a NewsCategory.
   * @param {NewsCategoryDeleteArgs} args - Arguments to delete one NewsCategory.
   * @example
   * // Delete one NewsCategory
   * const NewsCategory = await prisma.newsCategory.delete({
   *   where: {
   *     // ... filter to delete one NewsCategory
   *   }
   * })
   * 
   */
  delete<T extends NewsCategoryDeleteArgs>(args: Prisma.SelectSubset<T, NewsCategoryDeleteArgs<ExtArgs>>): Prisma.Prisma__NewsCategoryClient<runtime.Types.Result.GetResult<Prisma.$NewsCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one NewsCategory.
   * @param {NewsCategoryUpdateArgs} args - Arguments to update one NewsCategory.
   * @example
   * // Update one NewsCategory
   * const newsCategory = await prisma.newsCategory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends NewsCategoryUpdateArgs>(args: Prisma.SelectSubset<T, NewsCategoryUpdateArgs<ExtArgs>>): Prisma.Prisma__NewsCategoryClient<runtime.Types.Result.GetResult<Prisma.$NewsCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more NewsCategories.
   * @param {NewsCategoryDeleteManyArgs} args - Arguments to filter NewsCategories to delete.
   * @example
   * // Delete a few NewsCategories
   * const { count } = await prisma.newsCategory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends NewsCategoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, NewsCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more NewsCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NewsCategoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many NewsCategories
   * const newsCategory = await prisma.newsCategory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends NewsCategoryUpdateManyArgs>(args: Prisma.SelectSubset<T, NewsCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more NewsCategories and returns the data updated in the database.
   * @param {NewsCategoryUpdateManyAndReturnArgs} args - Arguments to update many NewsCategories.
   * @example
   * // Update many NewsCategories
   * const newsCategory = await prisma.newsCategory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more NewsCategories and only return the `id`
   * const newsCategoryWithIdOnly = await prisma.newsCategory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends NewsCategoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, NewsCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NewsCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one NewsCategory.
   * @param {NewsCategoryUpsertArgs} args - Arguments to update or create a NewsCategory.
   * @example
   * // Update or create a NewsCategory
   * const newsCategory = await prisma.newsCategory.upsert({
   *   create: {
   *     // ... data to create a NewsCategory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the NewsCategory we want to update
   *   }
   * })
   */
  upsert<T extends NewsCategoryUpsertArgs>(args: Prisma.SelectSubset<T, NewsCategoryUpsertArgs<ExtArgs>>): Prisma.Prisma__NewsCategoryClient<runtime.Types.Result.GetResult<Prisma.$NewsCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of NewsCategories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NewsCategoryCountArgs} args - Arguments to filter NewsCategories to count.
   * @example
   * // Count the number of NewsCategories
   * const count = await prisma.newsCategory.count({
   *   where: {
   *     // ... the filter for the NewsCategories we want to count
   *   }
   * })
  **/
  count<T extends NewsCategoryCountArgs>(
    args?: Prisma.Subset<T, NewsCategoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], NewsCategoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a NewsCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NewsCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends NewsCategoryAggregateArgs>(args: Prisma.Subset<T, NewsCategoryAggregateArgs>): Prisma.PrismaPromise<GetNewsCategoryAggregateType<T>>

  /**
   * Group by NewsCategory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NewsCategoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends NewsCategoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: NewsCategoryGroupByArgs['orderBy'] }
      : { orderBy?: NewsCategoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, NewsCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewsCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the NewsCategory model
 */
readonly fields: NewsCategoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for NewsCategory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__NewsCategoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the NewsCategory model
 */
export interface NewsCategoryFieldRefs {
  readonly id: Prisma.FieldRef<"NewsCategory", 'String'>
  readonly name: Prisma.FieldRef<"NewsCategory", 'String'>
}
    

// Custom InputTypes
/**
 * NewsCategory findUnique
 */
export type NewsCategoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NewsCategory
   */
  select?: Prisma.NewsCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the NewsCategory
   */
  omit?: Prisma.NewsCategoryOmit<ExtArgs> | null
  /**
   * Filter, which NewsCategory to fetch.
   */
  where: Prisma.NewsCategoryWhereUniqueInput
}

/**
 * NewsCategory findUniqueOrThrow
 */
export type NewsCategoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NewsCategory
   */
  select?: Prisma.NewsCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the NewsCategory
   */
  omit?: Prisma.NewsCategoryOmit<ExtArgs> | null
  /**
   * Filter, which NewsCategory to fetch.
   */
  where: Prisma.NewsCategoryWhereUniqueInput
}

/**
 * NewsCategory findFirst
 */
export type NewsCategoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NewsCategory
   */
  select?: Prisma.NewsCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the NewsCategory
   */
  omit?: Prisma.NewsCategoryOmit<ExtArgs> | null
  /**
   * Filter, which NewsCategory to fetch.
   */
  where?: Prisma.NewsCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of NewsCategories to fetch.
   */
  orderBy?: Prisma.NewsCategoryOrderByWithRelationInput | Prisma.NewsCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for NewsCategories.
   */
  cursor?: Prisma.NewsCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` NewsCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` NewsCategories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of NewsCategories.
   */
  distinct?: Prisma.NewsCategoryScalarFieldEnum | Prisma.NewsCategoryScalarFieldEnum[]
}

/**
 * NewsCategory findFirstOrThrow
 */
export type NewsCategoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NewsCategory
   */
  select?: Prisma.NewsCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the NewsCategory
   */
  omit?: Prisma.NewsCategoryOmit<ExtArgs> | null
  /**
   * Filter, which NewsCategory to fetch.
   */
  where?: Prisma.NewsCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of NewsCategories to fetch.
   */
  orderBy?: Prisma.NewsCategoryOrderByWithRelationInput | Prisma.NewsCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for NewsCategories.
   */
  cursor?: Prisma.NewsCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` NewsCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` NewsCategories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of NewsCategories.
   */
  distinct?: Prisma.NewsCategoryScalarFieldEnum | Prisma.NewsCategoryScalarFieldEnum[]
}

/**
 * NewsCategory findMany
 */
export type NewsCategoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NewsCategory
   */
  select?: Prisma.NewsCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the NewsCategory
   */
  omit?: Prisma.NewsCategoryOmit<ExtArgs> | null
  /**
   * Filter, which NewsCategories to fetch.
   */
  where?: Prisma.NewsCategoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of NewsCategories to fetch.
   */
  orderBy?: Prisma.NewsCategoryOrderByWithRelationInput | Prisma.NewsCategoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing NewsCategories.
   */
  cursor?: Prisma.NewsCategoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` NewsCategories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` NewsCategories.
   */
  skip?: number
  distinct?: Prisma.NewsCategoryScalarFieldEnum | Prisma.NewsCategoryScalarFieldEnum[]
}

/**
 * NewsCategory create
 */
export type NewsCategoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NewsCategory
   */
  select?: Prisma.NewsCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the NewsCategory
   */
  omit?: Prisma.NewsCategoryOmit<ExtArgs> | null
  /**
   * The data needed to create a NewsCategory.
   */
  data: Prisma.XOR<Prisma.NewsCategoryCreateInput, Prisma.NewsCategoryUncheckedCreateInput>
}

/**
 * NewsCategory createMany
 */
export type NewsCategoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many NewsCategories.
   */
  data: Prisma.NewsCategoryCreateManyInput | Prisma.NewsCategoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * NewsCategory createManyAndReturn
 */
export type NewsCategoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NewsCategory
   */
  select?: Prisma.NewsCategorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the NewsCategory
   */
  omit?: Prisma.NewsCategoryOmit<ExtArgs> | null
  /**
   * The data used to create many NewsCategories.
   */
  data: Prisma.NewsCategoryCreateManyInput | Prisma.NewsCategoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * NewsCategory update
 */
export type NewsCategoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NewsCategory
   */
  select?: Prisma.NewsCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the NewsCategory
   */
  omit?: Prisma.NewsCategoryOmit<ExtArgs> | null
  /**
   * The data needed to update a NewsCategory.
   */
  data: Prisma.XOR<Prisma.NewsCategoryUpdateInput, Prisma.NewsCategoryUncheckedUpdateInput>
  /**
   * Choose, which NewsCategory to update.
   */
  where: Prisma.NewsCategoryWhereUniqueInput
}

/**
 * NewsCategory updateMany
 */
export type NewsCategoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update NewsCategories.
   */
  data: Prisma.XOR<Prisma.NewsCategoryUpdateManyMutationInput, Prisma.NewsCategoryUncheckedUpdateManyInput>
  /**
   * Filter which NewsCategories to update
   */
  where?: Prisma.NewsCategoryWhereInput
  /**
   * Limit how many NewsCategories to update.
   */
  limit?: number
}

/**
 * NewsCategory updateManyAndReturn
 */
export type NewsCategoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NewsCategory
   */
  select?: Prisma.NewsCategorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the NewsCategory
   */
  omit?: Prisma.NewsCategoryOmit<ExtArgs> | null
  /**
   * The data used to update NewsCategories.
   */
  data: Prisma.XOR<Prisma.NewsCategoryUpdateManyMutationInput, Prisma.NewsCategoryUncheckedUpdateManyInput>
  /**
   * Filter which NewsCategories to update
   */
  where?: Prisma.NewsCategoryWhereInput
  /**
   * Limit how many NewsCategories to update.
   */
  limit?: number
}

/**
 * NewsCategory upsert
 */
export type NewsCategoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NewsCategory
   */
  select?: Prisma.NewsCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the NewsCategory
   */
  omit?: Prisma.NewsCategoryOmit<ExtArgs> | null
  /**
   * The filter to search for the NewsCategory to update in case it exists.
   */
  where: Prisma.NewsCategoryWhereUniqueInput
  /**
   * In case the NewsCategory found by the `where` argument doesn't exist, create a new NewsCategory with this data.
   */
  create: Prisma.XOR<Prisma.NewsCategoryCreateInput, Prisma.NewsCategoryUncheckedCreateInput>
  /**
   * In case the NewsCategory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.NewsCategoryUpdateInput, Prisma.NewsCategoryUncheckedUpdateInput>
}

/**
 * NewsCategory delete
 */
export type NewsCategoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NewsCategory
   */
  select?: Prisma.NewsCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the NewsCategory
   */
  omit?: Prisma.NewsCategoryOmit<ExtArgs> | null
  /**
   * Filter which NewsCategory to delete.
   */
  where: Prisma.NewsCategoryWhereUniqueInput
}

/**
 * NewsCategory deleteMany
 */
export type NewsCategoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which NewsCategories to delete
   */
  where?: Prisma.NewsCategoryWhereInput
  /**
   * Limit how many NewsCategories to delete.
   */
  limit?: number
}

/**
 * NewsCategory without action
 */
export type NewsCategoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NewsCategory
   */
  select?: Prisma.NewsCategorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the NewsCategory
   */
  omit?: Prisma.NewsCategoryOmit<ExtArgs> | null
}
